import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

public class MultiThreadedFileSearch {
    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Usage: java MultiThreadedFileSearch <keyword> <file1> <file2> ... <fileN>");
            return;
        }

        String keyword = args[0];
        List<File> files = new ArrayList<>();
        for (int i = 1; i < args.length; i++) {
            files.add(new File(args[i]));
        }

        SearchManager searchManager = new SearchManager(files, keyword);

        try {
            List<SearchResult> results = searchManager.executeSearch();
            for (SearchResult result : results) {
                System.out.println("File: " + result.getFileName() + ", Occurrences: " + result.getOccurrences());
            }
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
    }
}


import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class SearchManager {
    private final ExecutorService executorService;
    private final List<FileSearchTask> tasks;

    public SearchManager(List<File> files, String keyword) {
        this.executorService = Executors.newFixedThreadPool(files.size());
        this.tasks = new ArrayList<>();
        for (File file : files) {
            tasks.add(new FileSearchTask(file, keyword));
        }
    }

    public List<SearchResult> executeSearch() throws InterruptedException, ExecutionException {
        List<Future<SearchResult>> futures = executorService.invokeAll(tasks);
        List<SearchResult> results = new ArrayList<>();
        for (Future<SearchResult> future : futures) {
            results.add(future.get());
        }
        executorService.shutdown();
        return results;
    }
}



public class SearchResult {
    private final String fileName;
    private final int occurrences;

    public SearchResult(String fileName, int occurrences) {
        this.fileName = fileName;
        this.occurrences = occurrences;
    }

    public String getFileName() {
        return fileName;
    }

    public int getOccurrences() {
        return occurrences;
    }
}



import java.io.*;
import java.util.concurrent.Callable;

public class FileSearchTask implements Callable<SearchResult> {
    private final File file;
    private final String keyword;

    public FileSearchTask(File file, String keyword) {
        this.file = file;
        this.keyword = keyword;
    }

    @Override
    public SearchResult call() throws Exception {
        int occurrences = 0;
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                occurrences += countOccurrences(line, keyword);
            }
        }
        return new SearchResult(file.getName(), occurrences);
    }

    private int countOccurrences(String line, String keyword) {
        int count = 0;
        int index = 0;
        while ((index = line.indexOf(keyword, index)) != -1) {
            count++;
            index += keyword.length();
        }
        return count;
    }
}


