import java.util.Arrays;

public class MultithreadedMergeSort {

    private static class MergeSortTask implements Runnable {
        private int[] array;
        private int left;
        private int right;

        public MergeSortTask(int[] array, int left, int right) {
            this.array = array;
            this.left = left;
            this.right = right;
        }

        @Override
        public void run() {
            mergeSort(array, left, right);
        }

        private void mergeSort(int[] array, int left, int right) {
            if (left < right) {
                int mid = (left + right) / 2;

                Thread leftThread = new Thread(new MergeSortTask(array, left, mid));
                Thread rightThread = new Thread(new MergeSortTask(array, mid + 1, right));

                leftThread.start();
                rightThread.start();

                try {
                    leftThread.join();
                    rightThread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                merge(array, left, mid, right);
            }
        }

        private void merge(int[] array, int left, int mid, int right) {
            int n1 = mid - left + 1;
            int n2 = right - mid;

            int[] leftArray = new int[n1];
            int[] rightArray = new int[n2];

            // Manually copying the elements to temporary arrays
            for (int i = 0; i < n1; i++) {
                leftArray[i] = array[left + i];
            }
            for (int j = 0; j < n2; j++) {
                rightArray[j] = array[mid + 1 + j];
            }

            int i = 0, j = 0, k = left;
            while (i < n1 && j < n2) {
                if (leftArray[i] <= rightArray[j]) {
                    array[k++] = leftArray[i++];
                } else {
                    array[k++] = rightArray[j++];
                }
            }

            while (i < n1) {
                array[k++] = leftArray[i++];
            }

            while (j < n2) {
                array[k++] = rightArray[j++];
            }
        }
    }

    public static void mergeSort(int[] array) {
        Thread mainThread = new Thread(new MergeSortTask(array, 0, array.length - 1));
        mainThread.start();
        try {
            mainThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        int[] array = {12, 11, 13, 5, 6, 7};
        System.out.println("Given Array: " + Arrays.toString(array));

        mergeSort(array);

        System.out.println("Sorted Array: " + Arrays.toString(array));
    }
}
